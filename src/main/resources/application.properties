jobms.url=http://localhost:8082
reviewms.url=http://localhost:8083
companyms.url=http://localhost:8081

spring.application.name=jobms
server.port=8082

# H2 DB
#spring.h2.console.enabled=true
#spring.datasource.url=jdbc:h2:mem:test
#spring.jpa.show-sql=true
#spring.jpa.properties.hibernate.format_sql=true
#spring.jpa.hibernate.ddl-auto=update

# PostgreSQL
spring.datasource.url=jdbc:postgresql://localhost:5432/job
spring.datasource.username=raka
spring.datasource.password=password
spring.jpa.database=POSTGRESQL
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

#eureka
#line below to register to the eureka server. we have to provide the url
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
#line below to set if this application can be registered to Eureka
eureka.client.register-with-eureka=true
#line below is to fetch the registry
# should set false because a eureka server does not need to fetch the registry
eureka.client.fetch-registry=true
eureka.instance.hostname=localhost

#zipkin
# 1.0 will trace ALL requests, it will slow down. you can lower the setting
management.tracing.sampling.probability=1.0

# ConfigServer
#set the url of the config server, optional mean if the config server is down, the app will still run
spring.config.import=optional:configserver:http://localhost:8080
#select the profiles of the config
#spring.profiles.active=dev

## Actuator
### line below add health point to Actuator
management.endpoints.web.exposure.include=health
### line below add more details of information
management.endpoint.health.show-details=always
management.health.circuitbreakers.enabled=true

# Resilience4J
# register "companybreaker" for register health indicator, can be accessed via health endpoint
resilience4j.circuitbreaker.instances.companyBreaker.registerHealthIndicator=true
# use to calculate the percentage of failure rate
resilience4j.circuitbreaker.instances.companyBreaker.slidingWindowSize=10
# the number of calls that are recorded before the percentage of failure is calculated
resilience4j.circuitbreaker.instances.companyBreaker.minimumNumberOfCalls=5
# number of calls that will be transitioned back to half open state
resilience4j.circuitbreaker.instances.companyBreaker.permittedNumberOfCallsInHalfOpenState=3
# how long a circuit breaker can stay in open state
resilience4j.circuitbreaker.instances.companyBreaker.waitDurationInOpenState=10s
# percentage of how much a circuit breaker would be pass before it transition into open state
resilience4j.circuitbreaker.instances.companyBreaker.failureRateThreshold=50
# same like first one
resilience4j.circuitbreaker.instances.companyBreaker.register-health-indicator=true
resilience4j.circuitbreaker.instances.companyBreaker.automatic-transition-from-open-to-half-open-enabled=true
resilience4j.circuitbreaker.instances.companyBreaker.sliding-window-type=count_based

resilience4j.circuitbreaker.instances.companyBreaker.max-attempts=5
resilience4j.circuitbreaker.instances.companyBreaker.wait-duration=2s